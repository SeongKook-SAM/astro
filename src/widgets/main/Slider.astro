---
import { Image } from 'astro:assets';
import leftArrow from '../../assets/image/left-arrow.svg';
import rightArrow from '../../assets/image/right-arrow.svg';
import nPlaceBanner from '../../assets/image/main_banner_pc_nplace.png';
import helpBanner from '../../assets/image/main_banner_pc_main.svg';
import instagramBanner from '../../assets/image/main_banner_pc_instagram.svg';
import youtubeBanner from '../../assets/image/main_banner_pc_youtube.svg';

// 배너 이미지 배열
const banners = [
  { src: nPlaceBanner, alt: 'nPlaceBanner' },
  { src: helpBanner, alt: 'helpBanner' },
  { src: instagramBanner, alt: 'instagramBanner' },
  { src: youtubeBanner, alt: 'youtubeBanner' },
];

// 배너 리스트 텍스트 문구
---

<section class="w-full h-auto relative bg-gray-600 overflow-hidden">
  <!-- Left -->
  <button id="prev-slide" class="absolute top-1/2 left-[7%] -translate-y-1/2 z-10">
    <Image
      src={leftArrow}
      alt="left-arrow"
      width={20}
      height={20}
      class="opacity-50 hover:opacity-100 cursor-pointer transition-opacity"
    />
  </button>

  <!-- Image Slider -->
  <div id="slider-container" class="w-full h-full relative">
    <div id="slider-track" class="flex transition-transform duration-500 h-full">
      <div class="slide min-w-full h-full flex items-center justify-center" data-index="clone-last">
        <Image
          src={banners[banners.length - 1].src}
          alt={banners[banners.length - 1].alt}
          class="w-full h-full object-cover"
        />
      </div>
      {
        banners.map((banner, index) => (
          <div class="slide min-w-full h-full flex items-center justify-center" data-index={index}>
            <Image src={banner.src} alt={banner.alt} class="w-full h-full object-cover" />
          </div>
        ))
      }

      <!-- 첫 번째 슬라이드 복제 (마지막 위치에 놓음) -->
      <div
        class="slide min-w-full h-full flex items-center justify-center"
        data-index="clone-first"
      >
        <Image src={banners[0].src} alt={banners[0].alt} class="w-full h-full object-cover" />
      </div>
    </div>

    <!-- Indicators -->
    <div class="absolute bottom-5 left-1/2 -translate-x-1/2 flex gap-2">
      {
        banners.map((_, index) => (
          <button
            class="indicator w-3 h-3 rounded-full bg-white opacity-20 hover:opacity-70 transition-opacity cursor-pointer"
            data-index={index}
            aria-label={`슬라이드 넘버: ${index + 1}`}
          />
        ))
      }
    </div>
  </div>

  <!-- Right -->
  <button id="next-slide" class="absolute top-1/2 right-[7%] -translate-y-1/2 z-10">
    <Image
      src={rightArrow}
      alt="right-arrow"
      width={20}
      height={20}
      class="opacity-50 hover:opacity-100 cursor-pointer transition-opacity"
    />
  </button>
</section>

<!-- 슬라이더 함수 -->
<script>
  // 슬라이더 요소 선택
  const sliderTrack = document.getElementById('slider-track');
  const slides = document.querySelectorAll('.slide');
  const prevButton = document.getElementById('prev-slide');
  const nextButton = document.getElementById('next-slide');
  const indicators = document.querySelectorAll('.indicator');

  // 실제 슬라이드 개수 (복제된 항목 제외)
  const realSlideCount = indicators.length;
  // 전체 슬라이드 개수 (복제된 항목 포함)
  const totalSlideCount = slides.length;

  // 슬라이더 상태 (1부터 시작 - 첫 번째 슬라이드가 복제된 마지막 슬라이드 다음)
  let currentSlide = 1;
  let isTransitioning = false;

  // 터치 이벤트 변수
  let touchStartX = 0;
  let touchEndX = 0;

  // 실제 슬라이드 인덱스 계산 (복제 슬라이드 고려)
  function getRealIndex(index: number) {
    if (index === 0) return realSlideCount - 1;

    if (index === totalSlideCount - 1) return 0;

    return index - 1;
  }

  // 인디케이터 업데이트
  function updateIndicators(realIndex: number) {
    indicators.forEach((indicator, i) => {
      if (i === realIndex) {
        indicator.classList.add('opacity-70');
        indicator.classList.remove('opacity-20');
      } else {
        indicator.classList.add('opacity-20');
        indicator.classList.remove('opacity-70');
      }
    });
  }

  // 슬라이드 업데이트 함수
  function updateSlide(index: number, smooth = true) {
    if (isTransitioning) return;

    if (sliderTrack) {
      if (smooth) {
        sliderTrack.style.transition = 'transform 0.8s ease-in-out';
      } else {
        sliderTrack.style.transition = 'none';
      }

      sliderTrack.style.transform = `translateX(-${index * 100}%)`;
    }

    // 현재 슬라이드 업데이트
    currentSlide = index;

    // 인디케이터 업데이트 (실제 슬라이드 인덱스로 변환)
    const realIndex = getRealIndex(currentSlide);
    updateIndicators(realIndex);

    // 트랜지션 중 플래그 설정
    if (smooth) {
      isTransitioning = true;
      setTimeout(() => {
        isTransitioning = false;

        if (currentSlide === totalSlideCount - 1) {
          jumpToSlide(1);
        }

        if (currentSlide === 0) {
          jumpToSlide(realSlideCount);
        }
      }, 800);
    }
  }

  // 트랜지션 없이 슬라이드 점프
  function jumpToSlide(index: number) {
    updateSlide(index, false);
  }

  // 초기 위치 설정 - 중복된 코드 제거
  if (sliderTrack) {
    sliderTrack.style.transition = 'none';
    sliderTrack.style.transform = `translateX(-${currentSlide * 100}%)`;

    sliderTrack.offsetHeight;

    setTimeout(() => {
      sliderTrack.style.transition = 'transform 0.5s ease';
    }, 50);
  }

  // 초기 인디케이터 상태 설정 - 첫 번째 인디케이터 활성화
  updateIndicators(0);

  // 스와이프 처리 함수
  function handleSwipe() {
    if (touchEndX < touchStartX - 50) {
      goToNextSlide();
    } else if (touchEndX > touchStartX + 50) {
      goToPrevSlide();
    }
  }

  // 다음 슬라이드로 이동
  function goToNextSlide() {
    updateSlide(currentSlide + 1);
  }

  // 이전 슬라이드로 이동
  function goToPrevSlide() {
    updateSlide(currentSlide - 1);
  }

  // 이벤트 리스너 설정
  if (prevButton) {
    prevButton.addEventListener('click', goToPrevSlide);
  }

  if (nextButton) {
    nextButton.addEventListener('click', goToNextSlide);
  }

  // 인디케이터 클릭 이벤트
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      updateSlide(index + 1);
    });
  });

  // 자동 슬라이드 설정(10초)
  const autoSlideInterval = 10000;
  let autoSlideTimer = setInterval(goToNextSlide, autoSlideInterval);

  // 사용자 상호작용 관리
  const sliderContainer = document.getElementById('slider-container');
  if (sliderContainer) {
    sliderContainer.addEventListener('mouseenter', () => {
      clearInterval(autoSlideTimer);
    });

    sliderContainer.addEventListener('mouseleave', () => {
      autoSlideTimer = setInterval(goToNextSlide, autoSlideInterval);
    });

    // 터치 이벤트 처리
    sliderContainer.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    sliderContainer.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
  }

  // 트랜지션 종료 이벤트 리스너
  if (sliderTrack) {
    sliderTrack.addEventListener('transitionend', () => {
      isTransitioning = false;
    });
  }
</script>
